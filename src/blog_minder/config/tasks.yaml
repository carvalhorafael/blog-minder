fetch_all_posts_task:
  description: >
    Fetch all blog posts from the blog {blog_url}.
    Save these posts to a CSV file at {blog_posts_file_path}.
  expected_output: >
    A string with the path of the CSV file containing the content of the posts.


identify_posts_cannibalization_task:
  description: >
    Read a CSV file containing all posts from a blog and identify duplicate and similar posts.
    Save the result to a YAML file.
  expected_output: >
    A string with the path of the YAML file containing the result of work.


decide_winning_post_task:
  description: >
    Consider that you have the information listed below about two blog posts:
      - post01_id: {post01_id}
      - post01_keyword: {post01_keyword}
      - post01_link: {post01_link}
      - post02_id: {post02_id}
      - post02_keyword: {post02_keyword}
      - post02_link: {post02_link}
    
    The first post has the prefix "post01_" and the second has the prefix "post02_".
    The suffixes of both posts represent information about their attributes.
    
    Identify which of the posts is the winner using their URLs as {post01_link} and {post02_link}.
  expected_output: >
    A YAML string with data from the winning and losing posts, as below:
      - winner_id: post id of the winner post ({post01_id} or {post02_id})
      - winner_link: link of the winner post ({post01_link} or {post02_link})
      - winner_keyword: keyword of the winner post
      - loser_id: post id of the loser post ({post01_id} or {post02_id})
      - loser_link: link of the loser post ({post01_link} or {post02_link})


fetch_and_save_content_of_posts_task:
  description: >
    Consider that you have the information in YAML format about two blog posts:
      - winner_id: post id of the winner post ({post01_id} or {post02_id})
      - winner_link: link of the winner post ({post01_link} or {post02_link})
      - winner_keyword: keyword of the winner post
      - loser_id: post id of the loser post ({post01_id} or {post02_id})
      - loser_link: link of the loser post ({post01_link} or {post02_link})

    Fetch and save the content of winner and loser posts hosted at {blog_url} with the id parameters "winner_id" and "loser_id".
  expected_output: >
    A YAML string with content from the winning and losing posts, as below:
      - winner_id: post id of the winner post
      - winner_keyword: keyword of the winner post
      - loser_id: post id of the loser post


put_the_losing_post_in_draft_task:
  description: >
    Consider that you have the information in YAML format about two blog posts:
      - winner_id: post id of the winner post ({post01_id} or {post02_id})
      - loser_id: post id of the loser post ({post01_id} or {post02_id})
      - winner_keyword: keyword of the winner post

    You must change the status of the losing post (post_status attribute), hosted at {blog_url}, to "draft".
  expected_output: >
    A YAML string with content from the winning and losing posts, as below:
      - winner_id: post id of the winner post
      - winner_keyword: keyword of the winner post
      - loser_id: post id of the loser post


merge_and_improve_winner_post_content_task:
  description: >
    Consider that you have the information in YAML format about two blog posts:
      - winner_id: post id of the winner post ({post01_id} or {post02_id})
      - loser_id: post id of the loser post ({post01_id} or {post02_id})
      - winner_keyword: keyword of the winner post
    
    You MUST READ THE TWO FILES with content of the winner and loser posts.
      To do this, you can construct the path for each file like this:
        - path to winning article: tmp/posts/winner_post_winner_id.html (replace "winner_id" with the post id you received in YAML
        - path to losing article: tmp/posts/loser_post_loser_id.html (replace "loser_id" with the post id you received in YAML
    
    Before proceeding, ensure that you have read the contents of both files. 
    DO NOT PROCEED if you have read the contents of only one of the files.
    
    With the contents of the two files, now your goal is to improve the "winner post" using valuable elements found in the "loser post". Follow the guidelines below:

    1. Introduction:
      Add an engaging introduction that highlights the importance of the article's topic.

    2. Organization and Clarity:
      Improve the article's structure with clear and objective subheadings.

    3. Detailing Ideas:
      Expand sections with more details inspired by the "loser post".

    4. Additional Content:
      Include new sections or paragraphs that enrich the article's content. Consider adding:
        - Common Mistakes and Pitfalls to Avoid
        - Useful Tools or Methods
        - Frequently Asked Questions or Common Doubts Sections

    5. SEO and Relevance:
      Incorporate SEO tips and optimize the article for the following keyword: "winner_keyword".

    6. Examples and Categories:
      Maintain and organize examples or lists divided by relevant categories.

    7. Inspirational Quotes:
      Add an inspirational or relevant quote to the topic.

    8. Invitation for Interaction:
      Include an invitation for readers to interact or share their opinions, increasing audience engagement.

    9. Call to Action (CTA) in the Middle of the Article:
      Add a CTA in the middle of the article inviting readers to a free training. Use the following text in Portuguese:
        "Em um treinamento EXCLUSIVO e GRATUITO de 15 minutos, vou te ajudar a construir e/ou transformar seus resultados na internet. Acesse aqui: https://rafaelcarvalho.tv/treinamento-mcc"

    10. Conclusion:
      Improve the conclusion to reinforce the importance of the article's topic and promote additional actions or services if applicable.

    11. Call to Action (CTA) at the End of the Article:
      Add a CTA at the end of the article inviting readers to the same free training. Use a variation of the text used in the first CTA, in Portuguese:
        - "NÃ£o perca a chance de participar de um treinamento EXCLUSIVO e GRATUITO de 15 minutos que vai transformar seus resultados na internet. Inscreva-se agora: https://rafaelcarvalho.tv/treinamento-mcc"

    - Instructions:
      - Ensure that the generated post is in Brazilian Portuguese.
      - Ensure to maintain the tone and style of the "winning post".
      - Focus on adding value to the content without losing clarity and objectivity.
      - Use elements from the "loser post" only when they are pertinent and significantly improve the "winner post".


  expected_output: >
    A YAML string with content from the winner and new posts, as below:
      - winner_id: post id of the winner post
      - new_content: content produced to update the winning post

# merge_and_improve_post_content_task:
#   description: >
#     Consider that you have the information in YAML format about two blog posts:
#       - winner_id: post id of the winner post
#       - winner_keyword: keyword of the winner post
#       - loser_id: post id of the loser post

#     Your mission is to enrich the content of the winning post with the content of the losing post.
#     Follow these steps:
#       1. Fetch the content of both posts
#       1. Analyze the content of both posts.
#       2. Identify key points from the loser's content that can enhance the winner's content.
#       3. Integrate the relevant parts of the loser's content into the winner's content in a coherent and seamless manner.
#       4. Ensure the resulting content is more comprehensive, engaging, and informative than either post alone.

#       The resulting content must be better and more complete than the posts alone.

#  You will receive a YAML string with information about two blog posts: one classified as the winner and the other as the loser. The YAML format will be as follows:
#     winner:
#       id: integer with the winner post id
#       title: string with the title of the winner post
#       link: string with the winner post link
#       keyword: string with the winner post's focus keyword
#       justification: string justification for why you consider this post a winner
#       content: string with winner post content
#     loser:
#       id: integer with the loser post id
#       title: string with the title of the loser post
#       link: string with the loser post link
#       keyword: string with the loser post's focus keyword
#       justification: string justification for why you consider this post a loser
#       content: string with loser post content

# Your mission is to enrich the content of the winning post with the content of the losing post. Follow these steps:
# 1. Analyze the content of both posts.
# 2. Identify key points from the loser's content that can enhance the winner's content.
# 3. Integrate the relevant parts of the loser's content into the winner's content in a coherent and seamless manner.
# 4. Ensure the resulting content is more comprehensive, engaging, and informative than either post alone.

# The resulting content must be better and more complete than the posts alone.
  # expected_output: >
  #   A YAML string with data from the posts and the new content. The YAML format you must return should contain:
  #     winner_id: integer with the winner post id
  #     loser_id: integer with the loser post id
  #     new_content: string with the enriched content of the winner post

# update_winner_and_loser_posts:
#   description: >
#     You will receive a YAML string with information about two blog posts. The information are:
#       winner_id: integer with the post_id form the post labeled as the winner
#       loser_id: integer with the post_id from the post labeled as the losing
#       new_content: string with the content to be used to update the contento of the winner post

#     You must update the status of the losing post to "private".
#   expected_output: >
#     A string with the post new status.

# recommend_post_actions_task:
#   description: >
#     For each set of duplicate posts, recommend which ones to keep, delete, or merge.
#   expected_output: >
#     Actionable recommendations for each set of duplicate posts.
#   agent: content_analyzer

# suggest_new_keywords_task:
#   description: >
#     Analyze current keyword coverage and suggest new posts to cover important keywords not currently addressed.
#   expected_output: >
#     A list of new post topics with suggested keywords.
#   agent: seo_strategist


