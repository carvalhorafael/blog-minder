fetch_all_posts_task:
  description: >
    Fetch all blog posts from the blog {blog_url}.
    Save these posts to a CSV file at {blog_posts_file_path}.
  expected_output: >
    A string with the path of the CSV file containing the content of the posts.

identify_posts_cannibalization_task:
  description: >
    Read a CSV file containing all posts from a blog and identify duplicate and similar posts.
    Save the result to a YAML file.
  expected_output: >
    A string with the path of the YAML file containing the result of work.
  
decide_winning_post_task:
  description: >
    Consider that you have the information listed below about two blog posts:
      - post01_id: {post01_id}
      - post01_keyword: {post01_keyword}
      - post01_link: {post01_link}
      - post01_title: {post01_title}
      - post02_id: {post02_id}
      - post02_keyword: {post02_keyword}
      - post02_link: {post02_link}
      - post02_title: {post02_title}
    
    The first post has the prefix "post01_" and the second has the prefix "post02_".
    The suffixes of both posts represent information about their attributes.
    
    Fetch the content of both posts at {blog_url} usind {post01_id} and {post02_id} as identifier.

    Then return the content of both posts.
# After having the content of the both posts, their link and title, you must:
#   1. Analyze and compare the content of both posts
  
#   2. Decide which of the two posts has the largest and most complete content.
#     2.1 This post must be declared a winner and the other a loser
  
#   3. Return a YAML string with data from the winning and losing posts
#     winner: 
#       id: integer with the post id
#       title: string with the title of the post
#       link: string with post link,
#       keyword: string with the post's focus keyword
#       justification: string justification for why you consider this post a winner
#       content: string with the post's content
#     loser:
#       id: integer with the post id,
#       title: string with the title of the post,
#       link: string with post link,
#       keyword: string with the post's focus keyword
#       justification: string justification for why you consider this post a loser
#       content: string with the post's content  
  expected_output: >
    String with the content of both posts.
# A YAML string with data from the winning and losing posts.
# The YAML format you return  must be:
#   winner: 
#     id: integer with the winner post id
#     title: string with the title of the winner post
#     link: string with winner post link,
#     keyword: string with the winner post's focus keyword
#     justification: string justification for why you consider this post a winner
#     content: string with winner post content
#   loser:
#     id: integer with the loser post id,
#     title: string with the title of the loser post,
#     link: string with loser post link,
#     keyword: string with the loser post's focus keyword
#     justification: string justification for why you consider this post a loser
#     content: string with loser post content
        
merge_and_improve_post_content_task:
  description: >
   You will receive a YAML string with information about two blog posts: one classified as the winner and the other as the loser. The YAML format will be as follows:
      winner:
        id: integer with the winner post id
        title: string with the title of the winner post
        link: string with the winner post link
        keyword: string with the winner post's focus keyword
        justification: string justification for why you consider this post a winner
        content: string with winner post content
      loser:
        id: integer with the loser post id
        title: string with the title of the loser post
        link: string with the loser post link
        keyword: string with the loser post's focus keyword
        justification: string justification for why you consider this post a loser
        content: string with loser post content

    Your mission is to enrich the content of the winning post with the content of the losing post. Follow these steps:
    1. Analyze the content of both posts.
    2. Identify key points from the loser's content that can enhance the winner's content.
    3. Integrate the relevant parts of the loser's content into the winner's content in a coherent and seamless manner.
    4. Ensure the resulting content is more comprehensive, engaging, and informative than either post alone.

    The resulting content must be better and more complete than the posts alone.
  expected_output: >
    A YAML string with data from the posts and the new content. The YAML format you must return should contain:
      winner_id: integer with the winner post id
      loser_id: integer with the loser post id
      new_content: string with the enriched content of the winner post

update_winner_and_loser_posts:
  description: >
    You will receive a YAML string with information about two blog posts. The information are:
      winner_id: integer with the post_id form the post labeled as the winner
      loser_id: integer with the post_id from the post labeled as the losing
      new_content: string with the content to be used to update the contento of the winner post

    You must update the status of the losing post to "private".
  expected_output: >
    A string with the post new status.

# recommend_post_actions_task:
#   description: >
#     For each set of duplicate posts, recommend which ones to keep, delete, or merge.
#   expected_output: >
#     Actionable recommendations for each set of duplicate posts.
#   agent: content_analyzer

# suggest_new_keywords_task:
#   description: >
#     Analyze current keyword coverage and suggest new posts to cover important keywords not currently addressed.
#   expected_output: >
#     A list of new post topics with suggested keywords.
#   agent: seo_strategist


